\chapter{Inleiding}
\chplab{inleiding}
\chapterquote{If a man will begin with certainties, he shall end in doubts; but if he will be content to begin with doubts, he shall end in certainties.}{Francis Bacon}

Optimalisatie is een belangrijk onderwerp in de artifici\"ele intelligentie. Allereerst komen bij heel wat algemene problemen in de artifici\"ele intelligentie vormen van optimalisatie kijken. Het bepalen van de optimale parameters, het kortste pad of de kleinste beslissingsboom die een bepaalde fractie van de testdata juist classificeert zijn enkele voorbeelden.

\paragraph{}
Hoewel elke tak in de artifici\"ele intelligentie met deze problemen wordt geconfronteerd, bestaat er een specifieke tak die zich focust op deze problemen: ``Operationeel Onderzoek'' ofwel ``Operational Research''. Problemen die men tracht op te lossen zijn doorgaans moeilijk van aard: er is sprake van een groot aantal potenti\"ele oplossingen, het evalueren van een mogelijke oplossing is geen sinecure en de regels aan dewelke een oplossing moet voldoen zijn vrij complex.

\section{Operationeel Onderzoek}

Operationeel onderzoek probeert doorgaans optimalisatieproblemen op te lossen in een zeer concrete en praktische setting. Belangrijke voorbeelden zijn bijvoorbeeld het genereren van productieplanningen, het optimaliseren van winstmarges,... Omdat de zoekruimte dermate groot is, is het vinden van de exacte oplossing meestal niet mogelijk, men stelt zich in de meeste gevallen dan ook tevreden met een benaderende oplossing.

\paragraph{}
De laatste jaren is er een trend naar telkens meer ge\"integreerde systemen: algoritmen die onafhankelijk van het concrete probleem toch een oplossing kunnen uitrekenen. Deze evolutie is vooral te wijten aan de kost die de ontwikkeling van benaderingsalgoritmen met zich meebrengen. Omdat ontwikkelingskosten meestal hoger liggen dan de kosten ten gevolge door rekentijd is het financieel interessant om te investeren in systemen die met een minimale inspanning kunnen worden ontwikkeld. Belangrijk hierbij is de bouw van componenten die men kan hergebruiken voor het effectief oplossen van andere problemen. Een belangrijke groep van dit soort systemen zijn \emph{Hyperheuristieken}.

\section{Parallelle algoritmen}

Het oplossen van problemen met probleemonafhankelijke algoritmen komt met een kostprijs: we verwachten dat op maat gemaakte algoritmen effici\"enter zullen werken en dus binnen een gegeven tijd betere oplossingen zullen voorstellen. Door te investeren in betere machines kan men dit verlies enigszins goedmaken. Men kan de kloksnelheid van een processor echter niet eindeloos opdrijven. Deze fysische beperking betekent bijgevolg een limiet op de resultaten die \'e\'en processor kan afleveren.

\paragraph{}
Parallelle algoritmen worden meestal ingezet wanneer de rekenkracht van \'e\'en processor tekortschiet. Door het programma op te splitsen in verschillende deelprogramma's die elk op \'e\'en processor draaien hoopt men het rekenvermogen te kunnen opdrijven. Deze trend is bovendien ook zichtbaar door de introductie van meerdere \emph{kernen} ofwel \emph{cores} in moderne processoren. Vertaald naar optimalisatieproblemen hopen we dus met behulp van parallelle algoritmen tot betere oplossingen te komen die sneller uitgerekend kunnen worden.

\section{Onderzoeksvraag}

In deze masterthesis onderzoeken we of het mogelijk is om de prestaties van hyperheuristieken te verbeteren door deze parallel of verschillende processoren te laten draaien. Een belangrijk deel in deze onderzoeksvraag is welke componenten hiertoe kunnen bijdragen.

\paragraph{}
Vermits hyperheuristieken probleemonafhankelijk werken, moeten ze door middel van ervaring leren hoe men het probleem kan oplossen. Door verschillende processen ervaring met elkaar te laten uitwisselen kan de tijd waarin men voornamelijk rekenkracht investeert in het opdoen van ervaring mogelijk worden verkort. Dit kan echter ook averechts werken: wanneer men te snel in een exploitatiefase komt, is het mogelijk dat men uitspraken doet op basis van een te kleine hoeveelheid ervaring. Bovendien kan men de de kennis die \'e\'en processor heeft opgedaan niet altijd zomaar overdragen naar de andere processoren.

\section{Gevolgde methodiek}


\section{Structuur}
In \chpref{1} defini\"eren we het probleemdomein en de concepten hieromtrent. Bij de meeste aspecten wordt ook relevante literatuur besproken samen met de huidige stand van zaken.

\paragraph{}
\chpref{2} omvat een onderzoek naar sequenti\"ele hyperheuristieken. We onderzoeken 16 verschillende implementaties die in 2011 werden voorgesteld op een competitie. Op elk van de implementaties wordt kritiek geleverd en op het einde schuiven we enkele hypotheses naar voren waarom sommige hyperheuristieken beter presteren dan anderen. Een deel van deze hypotheses wordt ook verder beargumenteerd met empirisch onderzoek.

\paragraph{}
We ontwikkelen een systeem genaamd \emph{ParHyFlex} in \chpref{3}. Dit systeem ondersteund de bouw van parallelle hyperheuristieken en werd gebouwd op basis van de literatuurstudie in \chpref{1} en de hypotheses die voortkomen uit \chpref{2}. Ook wordt een concrete hyperheuristiek uitgewerkt: \emph{ParAdapHH} is een parallelle variant van \emph{AdapHH}, de winnaar van de competitie die we in \chpref{2} beschouwen.

\paragraph{}
In \chpref{4} testen we het systeem met behulp van twee problemen: \prbm{Max-3Sat} en het \prbm{Finite Domain Constraint Optimization Problem}. Er worden verschillende testresultaten voorgesteld die de invloed van bepaalde componenten en parameters onderzoeken.



%%% Local Variables: 
%%% mode: latex
%%% TeX-master: "masterproef"
%%% End: 

%%% ASPELL CHECK 2013-05-20